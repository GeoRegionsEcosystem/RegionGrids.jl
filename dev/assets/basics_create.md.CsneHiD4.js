import{_ as t,c as l,a4 as e,j as s,a as n,G as p,B as o,o as d}from"./chunks/framework.xP4K5mBm.js";const R=JSON.parse('{"title":"Creating a RegionGrid","description":"","frontmatter":{},"headers":[],"relativePath":"basics/create.md","filePath":"basics/create.md","lastUpdated":null}'),r={name:"basics/create.md"},c={class:"jldocstring custom-block",open:""};function h(g,a,k,u,m,b){const i=o("Badge");return d(),l("div",null,[a[3]||(a[3]=e(`<h1 id="Creating-a-RegionGrid" tabindex="-1">Creating a RegionGrid <a class="header-anchor" href="#Creating-a-RegionGrid" aria-label="Permalink to &quot;Creating a RegionGrid {#Creating-a-RegionGrid}&quot;">​</a></h1><p>Using RegionGrids.jl</p><p>In this section, we go through the basic steps of creating a RegionGrid for <code>RectRegion</code>s and <code>PolyRegion</code>s. See if you can spot the differences between the RegionGrids generated by the two different types.</p><h3 id="setup" tabindex="-1">Setup <a class="header-anchor" href="#setup" aria-label="Permalink to &quot;Setup&quot;">​</a></h3><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>using GeoRegions</span></span>
<span class="line"><span>using DelimitedFiles</span></span>
<span class="line"><span>using CairoMakie</span></span>
<span class="line"><span></span></span>
<span class="line"><span>download(&quot;https://raw.githubusercontent.com/natgeo-wong/GeoPlottingData/main/coastline_resl.txt&quot;,&quot;coast.cst&quot;)</span></span>
<span class="line"><span>coast = readdlm(&quot;coast.cst&quot;,comments=true)</span></span>
<span class="line"><span>clon  = coast[:,1]</span></span>
<span class="line"><span>clat  = coast[:,2]</span></span>
<span class="line"><span>nothing</span></span></code></pre></div><h2 id="RectGrid-Example" tabindex="-1"><code>RectGrid</code> Example <a class="header-anchor" href="#RectGrid-Example" aria-label="Permalink to &quot;\`RectGrid\` Example {#RectGrid-Example}&quot;">​</a></h2><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>geo  = GeoRegion(&quot;GF_SSA&quot;)</span></span>
<span class="line"><span>lon  = -180:5:180</span></span>
<span class="line"><span>lat  = -90:5:90</span></span>
<span class="line"><span>ggrd = RegionGrid(geo,lon[1:(end-1)],lat)</span></span></code></pre></div><h2 id="PolyGrid-Example" tabindex="-1"><code>PolyGrid</code> Example <a class="header-anchor" href="#PolyGrid-Example" aria-label="Permalink to &quot;\`PolyGrid\` Example {#PolyGrid-Example}&quot;">​</a></h2><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>geo  = GeoRegion(&quot;AR6_NWS&quot;)</span></span>
<span class="line"><span>lon  = -180:2:180;</span></span>
<span class="line"><span>lat  = -90:2:90;</span></span>
<span class="line"><span>ggrd = RegionGrid(geo,lon[1:(end-1)],lat)</span></span></code></pre></div><p>So here, we see that in this <code>PolyGrid</code> example, the <code>RegionGrid</code> contains an additional field <code>mask</code> that, within the rectilinear longitude-latitude shape bounding the <code>GeoRegion</code> (because gridded data here is assumed to be rectilinear), the data is within the GeoRegion. Values of <code>1</code> indicate it is within the GeoRegion, otherwise the values are \`NaN.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ggrd.mask</span></span></code></pre></div><h2 id="The-Mask-of-a-PolyGrid" tabindex="-1">The Mask of a <code>PolyGrid</code> <a class="header-anchor" href="#The-Mask-of-a-PolyGrid" aria-label="Permalink to &quot;The Mask of a \`PolyGrid\` {#The-Mask-of-a-PolyGrid}&quot;">​</a></h2><p>The <code>PolyGrid</code> type derived from a <code>PolyRegion</code> allows us to apply a mask to filter out data that is within the <code>shape</code> of a <code>PolyRegion</code> on a rectilinear lon-lat grid defined by the <code>bound</code> of a PolyRegion. We consider the following example of an AR6 region over South Asia:</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>geo  = GeoRegion(&quot;AR6_SAS&quot;)</span></span>
<span class="line"><span>lon  = -180:5:180;</span></span>
<span class="line"><span>lat  = -90:2:90;</span></span>
<span class="line"><span>ggrd = RegionGrid(geo,lon[1:(end-1)],lat)</span></span></code></pre></div><p>And using the field mask, we plot the points that are in the region (blue), and out of the region (red).</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mask = ggrd.mask</span></span>
<span class="line"><span>grid = ones(size(mask))</span></span>
<span class="line"><span>inlon = grid .* ggrd.lon;  inlon = inlon[.!isnan.(mask)]</span></span>
<span class="line"><span>inlat = grid .* ggrd.lat&#39;; inlat = inlat[.!isnan.(mask)]</span></span>
<span class="line"><span>otlon = grid .* ggrd.lon;  otlon = otlon[isnan.(mask)]</span></span>
<span class="line"><span>otlat = grid .* ggrd.lat&#39;; otlat = otlat[isnan.(mask)]</span></span>
<span class="line"><span>blon,blat,slon,slat = coordGeoRegion(geo)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fig = Figure()</span></span>
<span class="line"><span>aspect = (maximum(slon)-minimum(slon))/(maximum(slat)-minimum(slat))</span></span>
<span class="line"><span>ax = Axis(</span></span>
<span class="line"><span>    fig[1,1],width=750,height=750/aspect,</span></span>
<span class="line"><span>    limits=(minimum(slon)-2,maximum(slon)+2,minimum(slat)-2,maximum(slat)+2)</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>lines!(ax,clon,clat,color=:black)</span></span>
<span class="line"><span>lines!(ax,blon,blat)</span></span>
<span class="line"><span>lines!(ax,slon,slat)</span></span>
<span class="line"><span>scatter!(ax,otlon,otlat)</span></span>
<span class="line"><span>scatter!(ax,inlon,inlat)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>resize_to_layout!(fig)</span></span>
<span class="line"><span>fig</span></span></code></pre></div><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h2>`,17)),s("details",c,[s("summary",null,[a[0]||(a[0]=s("a",{id:"RegionGrids.RegionGrid-Tuple{RectRegion, Vector{<:Real}, Vector{<:Real}}",href:"#RegionGrids.RegionGrid-Tuple{RectRegion, Vector{<:Real}, Vector{<:Real}}"},[s("span",{class:"jlbinding"},"RegionGrids.RegionGrid")],-1)),a[1]||(a[1]=n()),p(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),a[2]||(a[2]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RegionGrid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    geo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GeoRegion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    lon </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{Vector{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},AbstractRange{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    lat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{Vector{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},AbstractRange{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ggrd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RectilinearGrid</span></span></code></pre></div><p>Creates a <code>RectGrid</code> or <code>PolyGrid</code> type based on the following arguments. This method is suitable for rectilinear grids of longitude/latitude output such as from Isca, or from satellite and reanalysis gridded datasets.</p><p><strong>Arguments</strong></p><ul><li><p><code>geo</code> : A GeoRegion of interest</p></li><li><p><code>lon</code> : A vector or <code>AbstractRange</code> containing the longitude points</p></li><li><p><code>lat</code> : A vector or <code>AbstractRange</code> containing the latitude points</p></li></ul><p><strong>Returns</strong></p><ul><li><code>ggrd</code> : A <code>RectilinearGrid</code></li></ul><p><a href="https://github.com/GeoRegionsEcosystem/RegionGrids.jl/blob/91a3cf5c5439499ace51237372c449e5027fc441/src/grid/rectilinear.jl#L1-L19" target="_blank" rel="noreferrer">source</a></p>`,7))]),a[4]||(a[4]=s("div",{class:"warning custom-block"},[s("p",{class:"custom-block-title"},"Missing docstring."),s("p",null,[n("Missing docstring for "),s("code",null,"RegionGrid(::GeoRegion,::Array{<:Real,2},::Array{<:Real,2})"),n(". Check Documenter's build log for details.")])],-1)),a[5]||(a[5]=s("hr",null,null,-1)),a[6]||(a[6]=s("p",null,[s("em",null,[n("This page was generated using "),s("a",{href:"https://github.com/fredrikekre/Literate.jl",target:"_blank",rel:"noreferrer"},"Literate.jl"),n(".")])],-1))])}const E=t(r,[["render",h]]);export{R as __pageData,E as default};
