import{_ as i,C as o,c as l,o as p,aA as e,j as s,G as t,a as d,w as r}from"./chunks/framework.DpoPorFA.js";const v=JSON.parse('{"title":"Unstructured Grids for Data Extraction","description":"","frontmatter":{},"headers":[],"relativePath":"types/unstructured.md","filePath":"types/unstructured.md","lastUpdated":null}'),c={name:"types/unstructured.md"},h={class:"jldocstring custom-block",open:""};function u(g,a,f,b,m,k){const n=o("Badge");return p(),l("div",null,[a[4]||(a[4]=e(`<h1 id="Unstructured-Grids-for-Data-Extraction" tabindex="-1">Unstructured Grids for Data Extraction <a class="header-anchor" href="#Unstructured-Grids-for-Data-Extraction" aria-label="Permalink to &quot;Unstructured Grids for Data Extraction {#Unstructured-Grids-for-Data-Extraction}&quot;">​</a></h1><p>There are also <code>RegionGrid</code> types without an actual grid, maybe there are a set of coordinates and geometries that define the corners or the centres of a mesh, such as:</p><ul><li>Model output from climate models such as cubed-sphere mesh output of the <a href="https://www.cesm.ucar.edu/models/cesm2" target="_blank" rel="noreferrer">Community Earth Systems Model 2 (CESM2)</a>.</li></ul><p>Basically, for each of these datasets, the data is given in such a way that the coordinates of the grid can be expressed via:</p><ul><li>A Vector of <code>Point2</code> types, with each <code>Point2</code> type containing (lon,lat)</li></ul><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeoRegions</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RegionGrids</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CairoMakie</span></span></code></pre></div><h2 id="Creating-Unstructured-Grids" tabindex="-1">Creating Unstructured Grids <a class="header-anchor" href="#Creating-Unstructured-Grids" aria-label="Permalink to &quot;Creating Unstructured Grids {#Creating-Unstructured-Grids}&quot;">​</a></h2><p>A Unstructured Grid can be created as follows:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ggrd = RegionGrid(geo,Point2.(lon,lat))</span></span></code></pre></div><p>where <code>geo</code> is a <code>GeoRegion</code> of interest that is found within the domain defined by the longitude and latitude grid vectors.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>lon = collect(10:20:360); nlon = length(lon)</span></span>
<span class="line"><span>lat = collect(-80:20:90); nlat = length(lat)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>glon = zeros(nlon,nlat); glon .= lon;  glon = glon[:]</span></span>
<span class="line"><span>glat = zeros(nlon,nlat); glat .= lat&#39;; glat = glat[:]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>plon = glon .+ 14rand(nlon*nlat) .- 7</span></span>
<span class="line"><span>plat = glat .+ 14rand(nlon*nlat) .- 7</span></span>
<span class="line"><span></span></span>
<span class="line"><span>geo = GeoRegion([10,100,-80,10],[50,10,-40,50])</span></span>
<span class="line"><span></span></span>
<span class="line"><span>iggrd = RegionGrid(geo,Point2.(glon,glat))</span></span>
<span class="line"><span>pggrd = RegionGrid(geo,Point2.(plon,plat))</span></span></code></pre></div><p>The API for creating a Unstructured Grid can be found <a href="./unstructured">here</a></p><h2 id="What-is-in-a-Unstructured-Grid?" tabindex="-1">What is in a Unstructured Grid? <a class="header-anchor" href="#What-is-in-a-Unstructured-Grid?" aria-label="Permalink to &quot;What is in a Unstructured Grid? {#What-is-in-a-Unstructured-Grid?}&quot;">​</a></h2>`,13)),s("details",h,[s("summary",null,[a[0]||(a[0]=s("a",{id:"RegionGrids.UnstructuredGrid",href:"#RegionGrids.UnstructuredGrid"},[s("span",{class:"jlbinding"},"RegionGrids.UnstructuredGrid")],-1)),a[1]||(a[1]=d()),t(n,{type:"info",class:"jlObjectType jlType",text:"Type"})]),a[3]||(a[3]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UnstructuredGrid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RegionGrid</span></span></code></pre></div><p>A <code>UnstructuredGrid</code> is a <code>RegionGrid</code> that is created based on an unstructured grid often used in cubed-sphere or unstructured-mesh grids.</p><p>All <code>UnstructuredGrid</code> type will contain the following fields:</p><ul><li><p><code>lon</code> - A Vector of <code>Float</code>s, defining the longitudes for each point in the RegionGrid that describe the region.</p></li><li><p><code>lat</code> - A Vector of <code>Float</code>s, defining the latitude for each point in the RegionGrid that describe the region.</p></li><li><p><code>ipoint</code> - A Vector of <code>Int</code>s, defining the indices of the valid points from the original unstructured grid that were extracted into the RegionGrid.</p></li><li><p><code>weights</code> - A Vector of <code>Float</code>s, defining the latitude-weights of each valid point in the grid. Will be NaN if outside the bounds of the GeoRegion used to define this RectilinearGrid.</p></li><li><p><code>X</code> - A Vector of <code>Float</code>s, defining the X-coordinates (in meters) of each point in the &quot;derotated&quot; RegionGrid about the centroid for the shape of the GeoRegion.</p></li><li><p><code>Y</code> - A Vector of <code>Float</code>s, defining the Y-coordinates (in meters) of each point in the &quot;derotated&quot; RegionGrid about the centroid for the shape of the GeoRegion.</p></li><li><p><code>θ</code> - A <code>Float</code> storing the information on the angle (in degrees) about which the data was rotated in the anti-clockwise direction. Mathematically, it is <code>rotation - geo.θ</code>.</p></li></ul>',4)),t(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>a[2]||(a[2]=[s("a",{href:"https://github.com/GeoRegionsEcosystem/RegionGrids.jl/blob/62577d8968982925d336b4df23b35a6647a8e2c3/src/RegionGrids.jl#L80-L93",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),a[5]||(a[5]=e(`<p>We see that in a <code>UnstructuredGrid</code> type, we have the <code>lon</code> and <code>lat</code> vectors that defined the longitude and latitude points that are within the GeoRegion.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ggrd.lon</span></span></code></pre></div><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ggrd.lat</span></span></code></pre></div><h2 id="An-example-of-using-Unstructured-Grids" tabindex="-1">An example of using Unstructured Grids <a class="header-anchor" href="#An-example-of-using-Unstructured-Grids" aria-label="Permalink to &quot;An example of using Unstructured Grids {#An-example-of-using-Unstructured-Grids}&quot;">​</a></h2><p>Say we have some sample data, here randomly generated.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>data = rand(nlon,nlat)[:]</span></span></code></pre></div><p>We extract the valid data within the GeoRegion of interest that we defined above:</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ndata = extract(data,iggrd)</span></span>
<span class="line"><span>pdata = extract(data,pggrd)</span></span></code></pre></div><p>And now let us visualize the results.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>slon,slat = coordinates(geo) # extract the coordinates</span></span>
<span class="line"><span>fig = Figure()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ax1 = Axis(</span></span>
<span class="line"><span>    fig[1,1],width=450,height=150,</span></span>
<span class="line"><span>    limits=(-180,360,-90,90)</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span>scatter!(ax1,glon,glat,color=:lightgrey)</span></span>
<span class="line"><span>scatter!(ax1,plon,plat,color=data)</span></span>
<span class="line"><span>lines!(ax1,slon,slat,color=:black,linewidth=2)</span></span>
<span class="line"><span>lines!(ax1,slon.+360,slat,color=:black,linewidth=2,linestyle=:dash)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>hidexdecorations!(ax1,ticks=false,grid=false)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ax2 = Axis(</span></span>
<span class="line"><span>    fig[2,1],width=450,height=150,</span></span>
<span class="line"><span>    limits=(-180,360,-90,90)</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span>scatter!(ax2,iggrd.lon,iggrd.lat,color=:lightgrey)</span></span>
<span class="line"><span>scatter!(ax2,pggrd.lon,pggrd.lat,color=pdata)</span></span>
<span class="line"><span>lines!(ax2,slon,slat,color=:black,linewidth=2)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Label(fig[3,:],&quot;Longitude / º&quot;)</span></span>
<span class="line"><span>Label(fig[:,0],&quot;Latitude / º&quot;,rotation=pi/2)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>resize_to_layout!(fig)</span></span>
<span class="line"><span>fig</span></span></code></pre></div>`,10))])}const G=i(c,[["render",u]]);export{v as __pageData,G as default};
